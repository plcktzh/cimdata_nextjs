// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Update database from schema
// npx prisma migrate dev --name nameDer√Ñnderung

// GUI:
// npx prisma studio

model Signature {
  // id Int @unique @default(autoincrement())
  id       String   @id @default(uuid())
  name     String?
  email    String   @unique
  approved Boolean  @default(false)
  date     DateTime @default(now())
}

// Events

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  poster      EventPoster?
  venue       Venue        @relation(fields: [venueId], references: [id])
  venueId     Int
  category    Category[]
}

// 1:1 relation
model EventPoster {
  id      Int    @id @default(autoincrement())
  url     String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int    @unique
}

// 1:n relation
model Venue {
  id    Int     @id @default(autoincrement())
  name  String
  event Event[]
}

// m:n relation
model Category {
  id    Int     @id @default(autoincrement())
  name  String
  event Event[]
}

/**
 * Poster as a mandatory field for Event
 * model Event {
 * id          Int         @id @default(autoincrement())
 * name        String
 * description String?
 * date        DateTime
 * poster      EventPoster @relation(fields: [posterId], references: [id])
 * posterId    Int         @unique
 * }
 * // 1:1 relation
 * model EventPoster {
 * id    Int    @id @default(autoincrement())
 * url   String
 * event Event?
 * }
 */
